
# Backend - Project Overview

This is a **Fastify-based API backend** called video-insight-api that follows a modular, scalable architecture. The project uses **TypeScript**, **TypeORM**, **PostgreSQL**, **JWT authentication**, and **AI-powered video analysis**.

## Core Technologies

- **[Fastify](mdc:https:/www.fastify.io)** - High-performance web framework
- **[TypeORM](mdc:https:/typeorm.io)** - ORM for database operations
- **[PostgreSQL](mdc:https:/www.postgresql.org)** - Primary database
- **[@sinclair/typebox](mdc:https:/github.com/sinclairzx81/typebox)** - Schema validation
- **[JWT](mdc:https:/jwt.io)** - Authentication system
- **[OpenAI GPT-4](mdc:https:/openai.com)** - AI-powered video analysis
- **[Redis](mdc:https:/redis.io)** - Caching and rate limiting
- **[OAuth](mdc:https:/oauth.net)** - Google and Discord authentication

## Project Architecture

The project follows a **layered architecture** with clear separation of concerns:

### Entry Points

- **[src/server.ts](mdc:src/server.ts)** - Main Fastify server configuration and setup
- **[src/local.ts](mdc:src/local.ts)** - Local development entry point
- **[package.json](mdc:package.json)** - Project dependencies and scripts

### Core Layers

1. **Routes** ([src/routes/](mdc:src/routes)) - HTTP endpoint definitions
2. **Controllers** ([src/controllers/](mdc:src/controllers)) - Request/response handling logic
3. **Services** ([src/services/](mdc:src/services)) - Business logic implementation
4. **Repositories** ([src/repositories/](mdc:src/repositories)) - Data access layer
5. **Entities** ([src/entities/](mdc:src/entities)) - TypeORM data models

### Supporting Components

- **Schemas** ([src/schemas/](mdc:src/schemas)) - Input/output validation using TypeBox
- **Plugins** ([src/plugins/](mdc:src/plugins)) - Custom Fastify plugins (auth, error handling)
- **Config** ([src/config/](mdc:src/config)) - Database, Redis, AWS configurations
- **Docs** ([src/docs/](mdc:src/docs)) - Swagger documentation definitions

## Key Features

### Video Processing & AI Analysis
- **Video Processing** - Submit and process video URLs for analysis
- **AI-Powered Insights** - Generate summaries and extract key insights using OpenAI GPT-4
- **Interactive Dashboard** - Rich dashboard with mind maps, insights, and transcriptions
- **Transcription Service** - Integrates with external transcription service (videodowncut)
- **Real-time Processing** - Background video processing with status tracking

### Authentication & User Management
- **JWT Authentication** - Protected endpoints with bearer tokens
- **OAuth Support** - Google and Discord OAuth providers
- **User Management** - User registration, authentication, and profile management
- **Profile Synchronization** - Avatar and name from OAuth providers

### Credit System & Monetization
- **Credit System** - Token-based credit system with automatic cost calculation
- **Transaction Tracking** - Detailed credit usage and transaction history
- **Admin Controls** - Grant/deduct credits for specific users or all users
- **Automatic Refunds** - Credits refunded if processing fails

### Security & Performance
- **Rate Limiting** - API protection (100 requests/minute)
- **Input Validation** - TypeBox schema validation for all requests
- **Error Handling** - Centralized error handling with consistent responses
- **Database Optimization** - Indexes and connection pooling

### Developer Experience
- **Swagger Documentation** - Interactive API docs at `/documentation`
- **Database Migrations** - TypeORM migration system
- **Testing** - Jest test suite in [**tests**/](mdc:__tests__)
- **Hot Reload** - Development server with automatic reloading

## Database Schema

### Core Entities

- **User** - User accounts with OAuth support and credit balance
- **Video** - Video submissions with processing status and AI insights
- **CreditTransaction** - Credit usage tracking and transaction history

### Key Relationships

- **User → Videos** - One-to-many relationship
- **User → CreditTransactions** - One-to-many relationship
- **Video → Dashboard** - JSON storage for AI insights

## API Structure

### Authentication Endpoints
- `/auth/login` - Email/password authentication
- `/auth/oauth/:provider/callback` - OAuth callbacks
- `/user/register` - User registration

### Video Processing Endpoints
- `/video` - Submit and manage videos
- `/video/:id/status` - Check processing status
- `/video/:id` - Get video details with dashboard

### Credit Management Endpoints
- `/credits` - User credit balance and history
- `/credits/admin/*` - Admin credit operations

### Documentation
- `/` - Interactive Swagger documentation
- `/healthcheck` - Health check endpoint

## Development Commands

- `npm run dev` - Development server with hot reload
- `npm test` - Run Jest tests
- `npm run migration:run` - Execute database migrations
- `npm run format` - Format code with Prettier
- `npm run build` - Build for production (Vercel)

## Deployment

- **Docker** - [Dockerfile](mdc:Dockerfile) for containerization
- **Vercel** - Serverless deployment via [vercel.json](mdc:vercel.json)
- **Environment Configuration** - Comprehensive environment variable support

## Environment Support

### Required Services
- **PostgreSQL** - Primary database
- **OpenAI API** - AI analysis capabilities
- **Redis** - Caching and rate limiting (optional)

### Optional Integrations
- **OAuth Providers** - Google and Discord
- **AWS Services** - S3, CloudFront, etc.
- **Stripe** - Payment processing
- **Clerk** - Authentication service

## Performance Features

- **Connection Pooling** - Database connection optimization
- **Rate Limiting** - API protection with Redis
- **Caching** - Redis-based caching for frequently accessed data
- **Background Processing** - Asynchronous video processing
- **Database Indexes** - Optimized queries for common operations

## Deployment

- **Docker** - [Dockerfile](mdc:Dockerfile) for containerization
- **Vercel** - Serverless deployment via [vercel.json](mdc:vercel.json)
