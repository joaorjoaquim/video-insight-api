# Environment Variables Reference

This document lists all available environment variables in the project, based on the `.env.example` file.

## üöÄ Server Configuration

### `PORT`
- **Description**: Port on which the server will run
- **Type**: Number
- **Default**: `5000`
- **Example**: `PORT=5000`

### `NODE_ENV`
- **Description**: Application execution environment
- **Type**: String
- **Values**: `development`, `production`, `homolog`
- **Default**: `development`
- **Example**: `NODE_ENV=development`

## üóÑÔ∏è Database Configuration

The project supports two forms of database configuration:

### Option 1: Complete URLs (Recommended)

#### `DATABASE_URL_WRITE`
- **Description**: Complete URL for write connection to database
- **Type**: String
- **Format**: `postgres://user:password@host:port/database`
- **Example**: `DATABASE_URL_WRITE=postgres://user:password@localhost:5432/mydb`

#### `DATABASE_URL_READ`
- **Description**: Complete URL for read connection to database
- **Type**: String
- **Format**: `postgres://user:password@host:port/database`
- **Default**: Uses same configuration as `DATABASE_URL_WRITE`
- **Example**: `DATABASE_URL_READ=postgres://user:password@localhost:5432/mydb`

### Option 2: Individual Variables

#### `DB_HOST`
- **Description**: PostgreSQL server host
- **Type**: String
- **Default**: `localhost`
- **Example**: `DB_HOST=localhost`

#### `DB_PORT`
- **Description**: PostgreSQL server port
- **Type**: Number
- **Default**: `5432`
- **Example**: `DB_PORT=5432`

#### `DB_USER`
- **Description**: Username for database authentication
- **Type**: String
- **Default**: `root`
- **Example**: `DB_USER=postgres`

#### `DB_PASSWORD`
- **Description**: Password for database authentication
- **Type**: String
- **Default**: `''` (empty)
- **Example**: `DB_PASSWORD=mypassword`

#### `DB_NAME`
- **Description**: Database name
- **Type**: String
- **Default**: `test`
- **Example**: `DB_NAME=video_insight`

### Advanced Database Settings

#### `DB_SSL`
- **Description**: Enables SSL for database connection
- **Type**: Boolean
- **Values**: `true`, `false`
- **Default**: `false`
- **Example**: `DB_SSL=true`

#### `DB_MAX_CONNECTION`
- **Description**: Maximum simultaneous connections in pool
- **Type**: Number
- **Default**: `10`
- **Example**: `DB_MAX_CONNECTION=20`

## üîí Security & Authentication

### `JWT_SECRET`
- **Description**: Secret key for JWT token signing
- **Type**: String
- **Required**: Yes
- **Recommendation**: Use a long and random string
- **Example**: `JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random`

### `API_SECRET_KEY`
- **Description**: Additional secret key for API security
- **Type**: String
- **Example**: `API_SECRET_KEY=your-api-secret-key-for-additional-security`

## ü§ñ OpenAI Integration

### `OPENAI_API_KEY`
- **Description**: OpenAI API key for AI video analysis
- **Type**: String
- **Required**: Yes
- **Format**: Starts with `sk-`
- **Example**: `OPENAI_API_KEY=sk-your-openai-api-key-here`

## üë§ OAuth Providers (Authentication Service)

### `CLERK_SECRET_KEY`
- **Description**: Clerk secret key for OAuth authentication
- **Type**: String
- **Format**: Starts with `sk_test_` or `sk_live_`
- **Example**: `CLERK_SECRET_KEY=sk_test_axRZs6wiWtDDUYuJDXIc8GsZLpF2zQkzMXdC3hyHQY`

### `CLERK_WEBHOOK_SECRET`
- **Description**: Secret for validating Clerk webhooks
- **Type**: String
- **Format**: Starts with `whsec_`
- **Example**: `CLERK_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`

### `CLERK_PUBLISHABLE_KEY`
- **Description**: Clerk public key for frontend
- **Type**: String
- **Format**: Starts with `pk_test_` or `pk_live_`
- **Example**: `CLERK_PUBLISHABLE_KEY=pk_test_Y3VyaW91cy1taW5rLTQ3LmNsZXJrLmFjY291bnRzLmRldiQ`

## üîÑ Redis & Caching

### `REDIS_URL`
- **Description**: Redis connection URL for general caching
- **Type**: String
- **Format**: `redis://host:port`
- **Example**: `REDIS_URL=redis://localhost:6379`

### `RATE_LIMIT_REDIS_URL`
- **Description**: Redis connection URL for rate limiting
- **Type**: String
- **Format**: `redis://host:port`
- **Example**: `RATE_LIMIT_REDIS_URL=redis://localhost:6379`

### `UPSTASH_REDIS_REST_URL`
- **Description**: Upstash Redis REST URL (managed service)
- **Type**: String
- **Example**: `UPSTASH_REDIS_REST_URL=https://your-redis.upstash.io`

### `UPSTASH_REDIS_REST_TOKEN`
- **Description**: Authentication token for Upstash Redis
- **Type**: String
- **Example**: `UPSTASH_REDIS_REST_TOKEN=your-token-here`

## ‚òÅÔ∏è AWS Services (Optional)

### `AWS_REGION`
- **Description**: AWS region for AWS services
- **Type**: String
- **Example**: `AWS_REGION=us-east-1`

### `AWS_ACCESS_KEY_ID`
- **Description**: AWS access key ID
- **Type**: String
- **Example**: `AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE`

### `AWS_SECRET_ACCESS_KEY`
- **Description**: AWS secret access key
- **Type**: String
- **Example**: `AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`

## üí≥ Stripe Integration (Payment Processing)

### `STRIPE_SECRET_KEY`
- **Description**: Stripe secret key for payment processing
- **Type**: String
- **Format**: Starts with `sk_test_` or `sk_live_`
- **Example**: `STRIPE_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`

### `STRIPE_WEBHOOK_SECRET`
- **Description**: Secret for validating Stripe webhooks
- **Type**: String
- **Format**: Starts with `whsec_`
- **Example**: `STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`

## üìä Logging

### `LOG_LEVEL`
- **Description**: Application logging level
- **Type**: String
- **Values**: `debug`, `info`, `warn`, `error`
- **Default**: `info`
- **Example**: `LOG_LEVEL=info`

### `APP_NAME`
- **Description**: Application name used in logs
- **Type**: String
- **Default**: `api`
- **Example**: `APP_NAME=video-insight-api`

## üåê CORS Configuration

### `CORS_ORIGIN`
- **Description**: Allowed origins for CORS requests
- **Type**: String (comma-separated)
- **Format**: List of URLs separated by comma
- **Example**: `CORS_ORIGIN=http://localhost:3000,https://yourdomain.com`

## üéØ Frontend Integration

### `FRONTEND_URL`
- **Description**: Frontend URL for OAuth redirects
- **Type**: String
- **Example**: `FRONTEND_URL=http://localhost:3000`

## üìã Setup Checklist

### Required Variables
- [ ] `PORT`
- [ ] `NODE_ENV`
- [ ] `JWT_SECRET`
- [ ] `OPENAI_API_KEY`
- [ ] Database configuration (URLs or individual variables)

### Optional Variables
- [ ] `REDIS_URL` (for caching)
- [ ] `CLERK_*` (if using OAuth)
- [ ] `STRIPE_*` (if using Stripe)
- [ ] `AWS_*` (if using AWS)
- [ ] `CORS_ORIGIN` (for frontend)
- [ ] `FRONTEND_URL` (for OAuth redirects)

### Minimum .env Example
```bash
PORT=5000
NODE_ENV=development
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
OPENAI_API_KEY=sk-your-openai-api-key-here
DATABASE_URL_WRITE=postgres://user:password@localhost:5432/video_insight
CORS_ORIGIN=http://localhost:3000
FRONTEND_URL=http://localhost:3000
```

## üîß Environment-Specific Configurations

### Development Environment
```bash
NODE_ENV=development
LOG_LEVEL=debug
CORS_ORIGIN=http://localhost:3000
```

### Production Environment
```bash
NODE_ENV=production
LOG_LEVEL=info
DB_SSL=true
CORS_ORIGIN=https://yourdomain.com
```

### Testing Environment
```bash
NODE_ENV=test
LOG_LEVEL=error
DATABASE_URL_WRITE=postgres://user:password@localhost:5432/video_insight_test
```

## üö® Security Notes

- **Never commit** `.env` files to version control
- **Use strong secrets** for JWT_SECRET and API_SECRET_KEY
- **Rotate keys regularly** for production environments
- **Use environment-specific** configurations
- **Validate all inputs** from environment variables

JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
DATABASE_URL_WRITE=postgres://user:password@localhost:5432/alertapx
CORS_ORIGIN=http://localhost:3000
```
