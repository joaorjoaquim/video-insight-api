
# Architecture Patterns & Conventions

## Request Flow Pattern

All API requests follow this consistent flow:

1. **Route** ([src/routes/](mdc:src/routes)) - Defines endpoint and HTTP method
2. **Schema** ([src/schemas/](mdc:src/schemas)) - Validates request/response using TypeBox
3. **Controller** ([src/controllers/](mdc:src/controllers)) - Handles HTTP logic, calls services
4. **Service** ([src/services/](mdc:src/services)) - Contains business logic
5. **Repository** ([src/repositories/](mdc:src/repositories)) - Database operations via TypeORM
6. **Entity** ([src/entities/](mdc:src/entities)) - Database models

## File Naming Conventions

- **Routes**: `{feature}.routes.ts` (e.g., `auth.routes.ts`)
- **Controllers**: `{feature}.controller.ts` (e.g., `user.controller.ts`)
- **Services**: `{feature}.service.ts` (e.g., `video.service.ts`)
- **Schemas**: `{feature}.schema.ts` (e.g., `user.schema.ts`)
- **Entities**: `{ModelName}.ts` (e.g., `User.ts`)
- **Docs**: `{feature}.doc.ts` (e.g., `healthcheck.doc.ts`)

## TypeBox Schema Pattern

Schemas use `@sinclair/typebox` for validation. Key patterns:

```typescript
// Request/Response definitions
export const CreateUserRequest = Type.Object({
  name: Type.String({ minLength: 1 }),
  email: Type.String({ format: 'email' }),
});

export const UserResponse = Type.Object({
  id: Type.Number(),
  name: Type.String(),
  email: Type.String(),
  credits: Type.Number(),
});
```

## Fastify Route Registration

Routes are modularized and registered in [src/routes/index.ts](mdc:src/routes/index.ts):

```typescript
// Each feature has its own route file
app.register(authRoutes, { prefix: '/auth' });
app.register(userRoutes, { prefix: '/user' });
app.register(videoRoutes, { prefix: '/video' });
app.register(creditRoutes, { prefix: '/credits' });
```

## Authentication Pattern

- **JWT tokens** issued via `/auth/login` or OAuth callbacks
- **Bearer authentication** required for protected endpoints
- **Auth plugin** ([src/plugins/auth.ts](mdc:src/plugins/auth.ts)) handles token validation
- **User info** attached to request via `request.user`
- **OAuth support** for Google and Discord providers

## Error Handling

- **Centralized error handler** in [src/plugins/errorHandler.ts](mdc:src/plugins/errorHandler.ts)
- **HTTP status codes** and consistent error responses
- **Fastify error hooks** for automatic error processing
- **Validation errors** from TypeBox schemas
- **Authentication errors** for JWT and OAuth failures

## Database Patterns

- **TypeORM entities** with decorators for table definitions
- **Repository pattern** for data access abstraction
- **Migration system** for database schema changes
- **Connection management** via [src/config/db.config.ts](mdc:src/config/db.config.ts)
- **Read/write separation** for database scaling
- **Connection pooling** for performance optimization

## Credit System Pattern

- **Credit checking** before resource-intensive operations
- **Transaction tracking** for all credit operations
- **Automatic refunds** for failed operations
- **Token usage tracking** for accurate billing
- **Admin controls** for credit management

## Video Processing Pattern

- **Multi-step processing**: Download → Transcribe → AI Analysis
- **Status tracking** with real-time updates
- **Background processing** for long-running operations
- **Error recovery** with automatic retries
- **Dashboard generation** with structured insights

## OAuth Integration Pattern

- **Provider abstraction** in [src/services/oauth.service.ts](mdc:src/services/oauth.service.ts)
- **Callback handling** for OAuth providers
- **User creation/update** for OAuth users
- **Profile synchronization** from OAuth providers
- **Token generation** for authenticated sessions

## AI Processing Pattern

- **OpenAI integration** for GPT-4 analysis
- **Text chunking** for large transcriptions
- **Token tracking** for cost calculation
- **Dashboard generation** with structured data
- **Error handling** for API failures

## Testing Strategy

- **Integration tests** in [**tests**/](mdc:__tests__) directory
- **Supertest** for HTTP endpoint testing
- **Jest** as the test runner
- Tests follow `{feature}.test.ts` naming pattern
- **Mock external services** (OpenAI, OAuth, etc.)
- **Database isolation** for test reliability

## Security Patterns

- **Input validation** with TypeBox schemas
- **Rate limiting** with Redis-based protection
- **JWT token validation** for all protected endpoints
- **CORS configuration** for cross-origin requests
- **Environment variable** validation
- **SQL injection prevention** via TypeORM

## Performance Patterns

- **Database indexes** for common queries
- **Connection pooling** for database efficiency
- **Redis caching** for frequently accessed data
- **Background processing** for heavy operations
- **Chunked processing** for large AI operations
- **Rate limiting** to prevent abuse

## Configuration Patterns

- **Environment-based** configuration
- **Validation** of required environment variables
- **Default values** for optional configurations
- **Development vs production** settings
- **Service-specific** configurations (OpenAI, OAuth, etc.)

## Logging Patterns

- **Structured logging** with Pino
- **Environment-specific** log levels
- **Error tracking** with detailed context
- **Performance monitoring** for slow operations
- **Audit logging** for admin operations

- **Integration tests** in [**tests**/](mdc:__tests__) directory
- **Supertest** for HTTP endpoint testing
- **Jest** as the test runner
- Tests follow `{feature}.test.ts` naming pattern
